// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & User Management (NextAuth.js compatible)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials provider
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  auditLogs AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Audit Logs for security tracking and compliance
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String?
  action    String // login_success, login_failed, password_change, session_revoked, etc.
  ipAddress String?
  userAgent String?
  details   Json? // Additional context data
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// Account Lockout tracking to prevent brute force attacks
model AccountLockout {
  id             String    @id @default(cuid())
  email          String    @unique
  failedAttempts Int       @default(0)
  lockedUntil    DateTime?
  lastAttempt    DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("account_lockouts")
}

enum Role {
  ADMIN
  EDITOR
}

// Personal Information - Core profile data
model PersonalInfo {
  id          String       @id @default(cuid())
  name        String
  title       String
  bio         String
  email       String
  location    String
  resumeUrl   String?
  socialLinks SocialLink[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("personal_info")
}

// Hero Section with stats
model Hero {
  id                   String   @id @default(cuid())
  verifiedSkills       Int      @default(0)
  professionalProjects Int      @default(0)
  personalProjects     Int      @default(0)
  yearsOfExperience    Int      @default(0)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("hero")
}

// Skills - matching data.ts structure
model Skill {
  id        Int      @id @default(autoincrement())
  name      String
  category  String // Frontend, Backend, Mobile, CMS, Design, Tools
  level     Int      @default(80) // 0-100 proficiency
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

// Projects - matching data.ts structure exactly
model Project {
  id                 Int       @id @default(autoincrement())
  projectName        String    @map("project_name")
  startDate          DateTime  @map("start_date")
  endDate            DateTime? @map("end_date")
  isOngoing          Boolean   @default(false) @map("is_ongoing")
  projectDescription String    @map("project_description")
  projectLink        String?   @map("project_link")
  githubLink         String?   @map("github_link")
  featured           Boolean   @default(false)

  // Related data
  projectTasks   ProjectTask[]
  skillsUtilized ProjectSkill[]

  // Metadata
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

// Project Tasks - matching data.ts structure
model ProjectTask {
  id        Int     @id @default(autoincrement())
  task      String
  order     Int     @default(0)
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tasks")
}

// Project Skills - many-to-many relationship for skills utilized
model ProjectSkill {
  id        Int     @id @default(autoincrement())
  name      String
  order     Int     @default(0)
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_skills")
}

// Services - matching data.ts structure
model Service {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String? // Font Awesome classes like "fas fa-rocket"
  desc      String   @map("description")
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

// Social Links - for PersonalInfo
model SocialLink {
  id       String  @id @default(cuid())
  name     String // GitHub, LinkedIn, Twitter
  url      String
  icon     String? // Font Awesome classes
  order    Int     @default(0)
  isActive Boolean @default(true)

  // Foreign key to PersonalInfo
  personalInfoId String?
  personalInfo   PersonalInfo? @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("social_links")
}

// Site Settings for global configuration
model SiteSettings {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  description String?
  type        SettingType @default(STRING)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("site_settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  URL
  EMAIL
}
